// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION MODELS REQUIRED BY NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  // This is the back-relation, completing the two-way street
  gym Gym?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  identifier String // This will be the user's email
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Gym {
  id      String @id @default(cuid())
  name    String
  address String?

  // ADD THIS LINE
  description String? @db.Text

  owner   User?  @relation(fields: [ownerId], references: [id])
  ownerId String? @unique

  subscription   Subscription?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

// NEW MODEL for subscriptions
model Subscription {
  id                     String             @id @default(cuid())
  gymId                  String             @unique  
  status                 SubscriptionStatus @default(ACTIVE)
  planId                 String             @default("free_plan")
  providerSubscriptionId String             @unique
  currentPeriodStart     DateTime           @default(now())
  currentPeriodEnd       DateTime           @default(now())
  gym                    Gym                @relation(fields: [gymId], references: [id])
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
}
