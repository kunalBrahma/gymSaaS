// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION MODELS REQUIRED BY NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  // This is the back-relation, completing the two-way street
  gym Gym?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  identifier String // This will be the user's email
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Gym {
  id      String @id @default(cuid())
  name    String
  address String?

  // ADD THIS LINE
  description String? @db.Text

  owner   User?  @relation(fields: [ownerId], references: [id])
  ownerId String? @unique

  subscription   Subscription?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  members         Member[]
  membershipPlans MembershipPlan[]
  
  razorpayKeyId     String?
  razorpayKeySecret String?
  customFields     CustomField[]  
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

// NEW MODEL for subscriptions
model Subscription {
  id                     String             @id @default(cuid())
  gymId                  String             @unique  
  status                 SubscriptionStatus @default(ACTIVE)
  planId                 String             @default("free_plan")
  providerSubscriptionId String             @unique
  currentPeriodStart     DateTime           @default(now())
  currentPeriodEnd       DateTime           @default(now())
  gym                    Gym                @relation(fields: [gymId], references: [id])
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
}

model MembershipPlan {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Int
  admissionFee Int      @default(0)
  durationMonths Int    @default(1)
  gymId        String
  gym          Gym      @relation(fields: [gymId], references: [id])
  members      Member[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Member {
  id                  String    @id @default(cuid())
  name                String
  email               String
  phone               String?
  address             String?
  dateOfBirth         DateTime?
  gender              String?
  weightKg            Float?
  heightCm            Float?
  photoUrl            String?
  idProofUrl          String?
  customFields        Json?
  joinedAt            DateTime  @default(now())
  membershipExpiresAt DateTime?
  updatedAt           DateTime  @updatedAt

  // Relations
  gymId               String
  gym                 Gym       @relation(fields: [gymId], references: [id])
  planId              String
  plan                MembershipPlan @relation(fields: [planId], references: [id])
  history             MembershipHistory[]

  // A member's email should be unique within a single gym
  @@unique([gymId, email])
}

model CustomField {
  id       String   @id @default(cuid())
  gymId    String
  gym      Gym      @relation(fields: [gymId], references: [id])
  name     String   // Field label, e.g., "Emergency Contact"
  type     String   // e.g., "text", "number", "date", "select", etc.
  options  Json?    // For select fields, options as JSON array
  required Boolean  @default(false)
  order    Int      // To order fields in the UI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gymId])
}

model Receipt {
  id             String    @id @default(cuid())
  membershipHistoryId   String            @unique  
  membershipHistory   MembershipHistory @relation(fields: [membershipHistoryId], references: [id], onDelete: Cascade)
  receiptNumber  String    @unique  // Unique receipt identifier
  amount        Int
  issuedAt      DateTime  @default(now())
  paymentMethod String?   // e.g., "Credit Card", "Razorpay", "Cash"
  notes         String?   // Optional notes or details
}

enum HistoryEventType {
  JOINED
  RENEWED
  PLAN_CHANGED
  MEMBERSHIP_EXPIRED
}

model MembershipHistory {
  id                String           @id @default(cuid())
  type              HistoryEventType // What happened? (Joined, Renewed, etc.)
  date              DateTime         @default(now())
  description       String           // A human-readable description, e.g., "Renewed with 'Monthly Gold' plan."
  amountPaid        Int?             // Amount paid for this transaction
  newExpiryDate     DateTime         // The new expiry date after this event
  
  // Relation to the member
  memberId          String
  member            Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  receipt           Receipt?  
}